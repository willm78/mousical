{"version":3,"sources":["serviceWorker.js","App.js","webAudioTouchUnlock.js","index.js"],"names":["Boolean","window","location","hostname","match","App","state","on","agreed","x","y","toggleOnOff","_this","setState","_ref","confirm","onMouseMove","_ref2","clientX","clientY","onTouchMove","_ref3","_touches$","touches","context","_this2","this","Tone","Promise","resolve","reject","unlock","resume","then","document","body","removeEventListener","reason","addEventListener","synth","AMSynth","toMaster","freq","yNorm","_this$state","innerWidth","toFixed","innerHeight","triggerAttackRelease","react_default","a","createElement","className","style","backgroundColor","concat","onClick","visibility","Component","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8KAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4HC2DSC,6MAnEbC,MAAQ,CACNC,IAAI,EACJC,QAAQ,EACRC,EAAG,EACHC,EAAG,KAGLC,YAAc,WACZC,EAAKC,SAAS,SAAAC,GAAoB,IAAjBP,EAAiBO,EAAjBP,GAAIC,EAAaM,EAAbN,OACnB,OAAKD,EAOE,CAAEA,IAAI,GANNC,EAIE,CAAED,IAAI,GAHIN,OAAOc,QAAQ,qCACd,CAAER,IAAI,EAAMC,QAAQ,GAAS,UAQrDQ,YAAc,SAAAC,GAAgC,IAApBR,EAAoBQ,EAA7BC,QAAqBR,EAAQO,EAAjBE,QAC3BP,EAAKC,SAAS,CAAEJ,IAAGC,SAGrBU,YAAc,SAAAC,GAAiB,IAAAC,EAAAD,EAAdE,QAC4B,GAA1Bd,EADYa,EACrBJ,QAAqBR,EADAY,EACTH,QACpBP,EAAKC,SAAS,CAAEJ,IAAGC,0FAGD,ICvCsBc,EDuCtBC,EAAAC,MCvCsBF,EDwCpBG,IAAKH,QCvCpB,IAAII,QAAQ,SAASC,EAASC,GACnC,GAAsB,cAAlBN,EAAQlB,OAAyB,iBAAkBL,OAAQ,CAC7D,IAAI8B,EAAS,SAATA,IACFP,EAAQQ,SAASC,KACf,WACEC,SAASC,KAAKC,oBAAoB,aAAcL,GAChDG,SAASC,KAAKC,oBAAoB,WAAYL,GAE9CF,GAAQ,IAEV,SAASQ,GACPP,EAAOO,MAKbH,SAASC,KAAKG,iBAAiB,aAAcP,GAAQ,GACrDG,SAASC,KAAKG,iBAAiB,WAAYP,GAAQ,QAEnDF,GAAQ,MDoBwBI,KAChC,kBAAOR,EAAKc,OAAQ,IAAIZ,IAAKa,SAAUC,8CAIlC,IAEHC,EACAC,EAHGC,EACclB,KAAKpB,MAAlBC,EADDqC,EACCrC,GAAIE,EADLmC,EACKnC,EAAGC,EADRkC,EACQlC,EAQf,OALIH,GAAMmB,KAAKa,QACbG,GAASjC,EAAIR,OAAO4C,WA3CT,KA2CiCC,UAC5CH,EAAQ,KAAQjC,EAAIT,OAAO8C,YAAe,KAAKD,UAC/CpB,KAAKa,MAAMS,qBAAqBN,EAAM,OAGtCO,EAAAC,EAAAC,cAAA,OACEC,UAAU,MACVpC,YAAaT,EAAKmB,KAAKV,YAAc,kBAAM,MAC3CI,YAAab,EAAKmB,KAAKN,YAAc,kBAAM,MAC3CiC,MACEV,EACI,CAAEW,gBAAe,OAAAC,OAASZ,EAAT,MAAAY,OAAmBZ,EAAnB,MAAAY,OAA6BZ,EAA7B,MACjB,MAGNM,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,UAAQK,QAAS9B,KAAKf,YAAayC,UAAU,YAC1C7C,EAAK,OAAS,SAEjB0C,EAAAC,EAAAC,cAAA,OACEE,MAAO,CAAEI,WAAYlD,EAAK,UAAY,WADxC,cAAAgD,OAEgBb,EAFhB,eA5DUgB,mBEDlBC,IAASC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,MAAS3B,SAAS4B,eAAe,SHyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.efddab56.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport Tone from 'tone';\r\n\r\nimport webAudioTouchUnlock from './webAudioTouchUnlock';\r\n\r\nimport './App.css';\r\n\r\nconst MAX_FREQ = 2000;\r\n\r\nclass App extends Component {\r\n  state = {\r\n    on: false,\r\n    agreed: false,\r\n    x: 0,\r\n    y: 0,\r\n  };\r\n\r\n  toggleOnOff = () => {\r\n    this.setState(({ on, agreed }) => {\r\n      if (!on) {\r\n        if (!agreed) {\r\n          const result = window.confirm('This app makes noise! Is this ok?');\r\n          return result ? { on: true, agreed: true } : null;\r\n        }\r\n        return { on: true };\r\n      }\r\n      return { on: false };\r\n    });\r\n  };\r\n\r\n  onMouseMove = ({ clientX: x, clientY: y }) => {\r\n    this.setState({ x, y });\r\n  };\r\n\r\n  onTouchMove = ({ touches }) => {\r\n    const { clientX: x, clientY: y } = touches[0];\r\n    this.setState({ x, y });\r\n  };\r\n\r\n  componentDidMount() {\r\n    webAudioTouchUnlock(Tone.context).then(\r\n      () => (this.synth = new Tone.AMSynth().toMaster())\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { on, x, y } = this.state;\r\n    let freq;\r\n    let yNorm;\r\n    if (on && this.synth) {\r\n      freq = ((x / window.innerWidth) * MAX_FREQ).toFixed();\r\n      yNorm = 255 - ((y / window.innerHeight) * 180).toFixed();\r\n      this.synth.triggerAttackRelease(freq, '8n');\r\n    }\r\n    return (\r\n      <div\r\n        className=\"App\"\r\n        onMouseMove={on ? this.onMouseMove : () => null}\r\n        onTouchMove={on ? this.onTouchMove : () => null}\r\n        style={\r\n          yNorm\r\n            ? { backgroundColor: `rgb(${yNorm}, ${yNorm}, ${yNorm})` }\r\n            : null\r\n        }\r\n      >\r\n        <h1>Mousical</h1>\r\n        <button onClick={this.toggleOnOff} className=\"StartBtn\">\r\n          {on ? 'Stop' : 'Start'}\r\n        </button>\r\n        <div\r\n          style={{ visibility: on ? 'visible' : 'hidden' }}\r\n        >{`Frequency: ${freq}Hz`}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","export default function webAudioTouchUnlock(context) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (context.state === 'suspended' && 'ontouchstart' in window) {\r\n      var unlock = function() {\r\n        context.resume().then(\r\n          function() {\r\n            document.body.removeEventListener('touchstart', unlock);\r\n            document.body.removeEventListener('touchend', unlock);\r\n\r\n            resolve(true);\r\n          },\r\n          function(reason) {\r\n            reject(reason);\r\n          }\r\n        );\r\n      };\r\n\r\n      document.body.addEventListener('touchstart', unlock, false);\r\n      document.body.addEventListener('touchend', unlock, false);\r\n    } else {\r\n      resolve(false);\r\n    }\r\n  });\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}