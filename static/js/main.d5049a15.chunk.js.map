{"version":3,"sources":["serviceWorker.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","synth","Tone","AMSynth","toMaster","App","state","on","x","y","toggleOnOff","_this","setState","_ref","confirm","onMouseMove","_ref2","clientX","clientY","triggerAttackRelease","onTouchMove","_ref3","_touches$","touches","_this$state","this","react_default","a","createElement","className","onClick","style","visibility","concat","Component","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8KAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kHCbAC,UAAQ,IAAIC,IAAKC,SAAUC,YAkDlBC,6MA/CbC,MAAQ,CACNC,IAAI,EACJC,EAAG,EACHC,EAAG,KAGLC,YAAc,WACZC,EAAKC,SAAS,SAAAC,GACZ,OADwBA,EAATN,GAKR,CAAEA,IAAI,GAHIV,OAAOiB,QAAQ,qCACd,CAAEP,IAAI,GAAS,UAMrCQ,YAAc,SAAAC,GAAgC,IAApBR,EAAoBQ,EAA7BC,QAAqBR,EAAQO,EAAjBE,QAC3BjB,EAAMkB,qBAAqBX,EAAG,MAC9BG,EAAKC,SAAS,CAAEJ,IAAGC,SAGrBW,YAAc,SAAAC,GAAiB,IAAAC,EAAAD,EAAdE,QAC4B,GAA1Bf,EADYc,EACrBL,QAAqBR,EADAa,EACTJ,QACpBjB,EAAMkB,qBAAqBX,EAAG,MAC9BG,EAAKC,SAAS,CAAEJ,IAAGC,+EAGZ,IAAAe,EACcC,KAAKnB,MAAlBC,EADDiB,EACCjB,GAAIC,EADLgB,EACKhB,EADLgB,EACQf,EACf,OACEiB,EAAAC,EAAAC,cAAA,OACEC,UAAU,MACVd,YAAaR,EAAKkB,KAAKV,YAAc,kBAAM,MAC3CK,YAAab,EAAKkB,KAAKL,YAAc,kBAAM,OAE3CM,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,UAAQE,QAASL,KAAKf,YAAamB,UAAU,YAC1CtB,EAAK,OAAS,SAEjBmB,EAAAC,EAAAC,cAAA,OACEG,MAAO,CAAEC,WAAYzB,EAAK,UAAY,WADxC,cAAA0B,OAEgBzB,EAFhB,eAxCU0B,mBCClBC,IAASC,OAAOV,EAAAC,EAAAC,cAACS,EAAD,MAASC,SAASC,eAAe,SFyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d5049a15.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport Tone from 'tone';\n\nimport './App.css';\n\nconst synth = new Tone.AMSynth().toMaster();\n\nclass App extends Component {\n  state = {\n    on: false,\n    x: 0,\n    y: 0,\n  };\n\n  toggleOnOff = () => {\n    this.setState(({ on }) => {\n      if (!on) {\n        const result = window.confirm('This app makes noise! Is this ok?');\n        return result ? { on: true } : null;\n      }\n      return { on: false };\n    });\n  };\n\n  onMouseMove = ({ clientX: x, clientY: y }) => {\n    synth.triggerAttackRelease(x, '8n');\n    this.setState({ x, y });\n  };\n\n  onTouchMove = ({ touches }) => {\n    const { clientX: x, clientY: y } = touches[0];\n    synth.triggerAttackRelease(x, '8n');\n    this.setState({ x, y });\n  };\n\n  render() {\n    const { on, x, y } = this.state;\n    return (\n      <div\n        className=\"App\"\n        onMouseMove={on ? this.onMouseMove : () => null}\n        onTouchMove={on ? this.onTouchMove : () => null}\n      >\n        <h1>Mousical</h1>\n        <button onClick={this.toggleOnOff} className=\"StartBtn\">\n          {on ? 'Stop' : 'Start'}\n        </button>\n        <div\n          style={{ visibility: on ? 'visible' : 'hidden' }}\n        >{`Frequency: ${x}Hz`}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}